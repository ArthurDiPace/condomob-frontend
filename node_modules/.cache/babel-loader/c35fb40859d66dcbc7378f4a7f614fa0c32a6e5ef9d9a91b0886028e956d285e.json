{"ast":null,"code":"import moment from 'moment';\nimport SPagebar from '@/layout/SPagebar.vue';\nimport * as SemobService from '@/services/semob.service';\nimport PromptDialog from '@/components/PromptDialog.vue';\nexport default {\n  name: 'BoletoConsulta',\n  components: {\n    SPagebar,\n    PromptDialog\n  },\n  data: () => ({\n    carregando: false,\n    breadcrumbs: [{\n      'text': 'Consultar boleto',\n      'disabled': true\n    }],\n    boleto: {\n      nosso_numero: ''\n    },\n    errors: {}\n  }),\n  methods: {\n    async consultarBoleto() {\n      this.carregando = true;\n      try {\n        const response = await SemobService.buscarBoleto(this.boleto.nosso_numero);\n        if (response.data.valorPagoSacado) {\n          const boleto = {\n            valor: response.data.valorPagoSacado,\n            data_pagamento: response.data.dataRecebimentoTitulo ? moment(response.data.dataRecebimentoTitulo, \"DDMMYYYY\").format('DD/MM/YYYY') : null\n          };\n          this.carregando = false;\n          this.showSuccessToast(`Valor Pago: ${boleto.valor}, Data de Pagamento: ${boleto.data_pagamento || 'Ainda não pago'}`);\n          return boleto;\n        } else {\n          this.carregando = false;\n          this.showErrorToast(\"Boleto ainda não foi pago\");\n          return null;\n        }\n      } catch (error) {\n        this.carregando = false;\n        if (error.response) {\n          const statusCode = error.response.status;\n          switch (statusCode) {\n            case 500:\n              this.showErrorToast(\"Erro do servidor. Por favor, tente novamente mais tarde.\");\n              break;\n            case 400:\n              this.showErrorToast(\"Esse Boleto não existe.\");\n              break;\n            default:\n              this.handleError(error);\n          }\n        } else {\n          this.handleError(error);\n        }\n      }\n    },\n    showSuccessToast(message) {\n      this.$toast.open({\n        message: message,\n        type: 'success'\n      });\n    },\n    showErrorToast(message) {\n      this.$toast.open({\n        message: message,\n        type: 'error'\n      });\n    },\n    handleError(error) {\n      this.errors = error;\n    }\n  }\n};","map":{"version":3,"names":["moment","SPagebar","SemobService","PromptDialog","name","components","data","carregando","breadcrumbs","boleto","nosso_numero","errors","methods","consultarBoleto","response","buscarBoleto","valorPagoSacado","valor","data_pagamento","dataRecebimentoTitulo","format","showSuccessToast","showErrorToast","error","statusCode","status","handleError","message","$toast","open","type"],"sources":["src/views/consulta/ConsultaBoleto.vue"],"sourcesContent":["<template>\n  <v-container fluid>\n    <s-pagebar\n      page-title=\"Consultar boleto\"\n      :breadcrumbs=\"breadcrumbs\"\n    />\n    <v-card flat>\n      <v-card-text>\n        <v-row dense>\n          <v-col\n            cols=\"12\"\n            md=\"3\"\n            sm=\"12\"\n          >\n            <v-text-field\n              v-model=\"boleto.nosso_numero\"\n              v-mask=\"['XXXXXXXXXXXXXXXXXXXX']\"\n              label=\"Nosso Numero\"\n              class=\"required\"\n              :error-messages=\"errors.nosso_numero\"\n              :loading=\"carregando\"\n            />\n          </v-col>\n        </v-row>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer />\n        <v-btn\n          outlined\n          color=\"primary\"\n          @click=\"consultarBoleto\"\n        >\n          Consultar\n        </v-btn>\n        <v-btn\n          outlined\n          color=\"blue-grey darken-4\"\n          @click=\"$router.back()\"\n        >\n          Voltar\n        </v-btn>\n      </v-card-actions>\n      <prompt-dialog ref=\"prompt\" />\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nimport moment from 'moment'\nimport SPagebar from '@/layout/SPagebar.vue'\nimport * as SemobService from '@/services/semob.service'\nimport PromptDialog from '@/components/PromptDialog.vue'\n\nexport default {\n  name: 'BoletoConsulta',\n  components: { SPagebar, PromptDialog },\n  data: () => ({\n    carregando: false,\n    breadcrumbs: [\n      {\n        'text': 'Consultar boleto',\n        'disabled': true\n      }\n    ],\n    boleto: {\n      nosso_numero: '',\n    },\n    errors: {},\n  }),\n  methods: {\n    async consultarBoleto() {\n      this.carregando = true;\n      try {\n        const response = await SemobService.buscarBoleto(this.boleto.nosso_numero);\n\n        if (response.data.valorPagoSacado) {\n          const boleto = {\n            valor: response.data.valorPagoSacado,\n            data_pagamento: response.data.dataRecebimentoTitulo ? moment(response.data.dataRecebimentoTitulo, \"DDMMYYYY\").format('DD/MM/YYYY') : null,\n          };\n\n          this.carregando = false;\n          this.showSuccessToast(`Valor Pago: ${boleto.valor}, Data de Pagamento: ${boleto.data_pagamento || 'Ainda não pago'}`);\n          return boleto;\n        } else {\n          this.carregando = false;\n          this.showErrorToast(\"Boleto ainda não foi pago\");\n          return null;\n        }\n      } catch (error) {\n        this.carregando = false;\n        \n        if (error.response) {\n          const statusCode = error.response.status;\n\n          switch (statusCode) {\n            case 500:\n              this.showErrorToast(\"Erro do servidor. Por favor, tente novamente mais tarde.\");\n              break;\n            case 400:\n              this.showErrorToast(\"Esse Boleto não existe.\");\n              break;\n            default:\n              this.handleError(error);\n          }\n        } else {\n          this.handleError(error);\n        }\n      }\n    },\n    showSuccessToast(message) {\n      this.$toast.open({\n        message: message,\n        type: 'success',\n      })\n    },\n    showErrorToast(message) {\n      this.$toast.open({\n        message: message,\n        type: 'error',\n      });\n    },\n    handleError(error) {\n      this.errors = error\n    },\n  }\n}\n</script>\n\n<style>\n.required label::after {\n    content: \"*\";\n    color: red;\n}\n</style>"],"mappings":"AAgDA,OAAAA,MAAA;AACA,OAAAC,QAAA;AACA,YAAAC,YAAA;AACA,OAAAC,YAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IAAAJ,QAAA;IAAAE;EAAA;EACAG,IAAA,EAAAA,CAAA;IACAC,UAAA;IACAC,WAAA,GACA;MACA;MACA;IACA,EACA;IACAC,MAAA;MACAC,YAAA;IACA;IACAC,MAAA;EACA;EACAC,OAAA;IACA,MAAAC,gBAAA;MACA,KAAAN,UAAA;MACA;QACA,MAAAO,QAAA,SAAAZ,YAAA,CAAAa,YAAA,MAAAN,MAAA,CAAAC,YAAA;QAEA,IAAAI,QAAA,CAAAR,IAAA,CAAAU,eAAA;UACA,MAAAP,MAAA;YACAQ,KAAA,EAAAH,QAAA,CAAAR,IAAA,CAAAU,eAAA;YACAE,cAAA,EAAAJ,QAAA,CAAAR,IAAA,CAAAa,qBAAA,GAAAnB,MAAA,CAAAc,QAAA,CAAAR,IAAA,CAAAa,qBAAA,cAAAC,MAAA;UACA;UAEA,KAAAb,UAAA;UACA,KAAAc,gBAAA,gBAAAZ,MAAA,CAAAQ,KAAA,wBAAAR,MAAA,CAAAS,cAAA;UACA,OAAAT,MAAA;QACA;UACA,KAAAF,UAAA;UACA,KAAAe,cAAA;UACA;QACA;MACA,SAAAC,KAAA;QACA,KAAAhB,UAAA;QAEA,IAAAgB,KAAA,CAAAT,QAAA;UACA,MAAAU,UAAA,GAAAD,KAAA,CAAAT,QAAA,CAAAW,MAAA;UAEA,QAAAD,UAAA;YACA;cACA,KAAAF,cAAA;cACA;YACA;cACA,KAAAA,cAAA;cACA;YACA;cACA,KAAAI,WAAA,CAAAH,KAAA;UACA;QACA;UACA,KAAAG,WAAA,CAAAH,KAAA;QACA;MACA;IACA;IACAF,iBAAAM,OAAA;MACA,KAAAC,MAAA,CAAAC,IAAA;QACAF,OAAA,EAAAA,OAAA;QACAG,IAAA;MACA;IACA;IACAR,eAAAK,OAAA;MACA,KAAAC,MAAA,CAAAC,IAAA;QACAF,OAAA,EAAAA,OAAA;QACAG,IAAA;MACA;IACA;IACAJ,YAAAH,KAAA;MACA,KAAAZ,MAAA,GAAAY,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}